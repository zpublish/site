{"version":3,"sources":["webpack://web/./src/components/routes/zecpages-timeline.js","webpack://web/./src/pages/index.js"],"names":["TimelineFeed","theme","useTheme","useState","userTimelineData","zecPagesItems","setZecPagesItems","useEffect","fetch","headers","res","json","_data","px","py","center","fontSize","fontFamily","bold","href","color","mb","label","labelVisible","value","p","borderColor","placeholderColor","borderWidth","multiline","colors","icons","qrcode_box","bg","address","Section","map","i","datetime","memo","id","key","createdAt","Date","Number","text","lineHeight","viewport","useWindowViewport","navOverlayOpen","setNavOverlayOpen","title","minHeight","height","width","AppBar","onClick","Footer","position","NavOverlay","onMenuClick"],"mappings":"4VAgPMA,G,QAAe,WACnB,IAAQC,GAAUC,UAAVD,MACR,GAA0BE,cAASC,GACnC,GADA,WAC0CD,cAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAlDE,EAAP,KAAsBC,EAAtB,KAEA,GAA0CH,cAAS,IAAnD,UA0CA,OAtCAI,gBAAS,iBAAC,4FACI,kCADJ,SAGUC,MAFN,kCAEiB,CAC3BC,QAAS,KAJH,cAGFC,EAHE,gBAOYA,EAAIC,OAPhB,OAOFC,EAPE,OASRN,EAAiBM,GATT,2CAUP,CAACN,IA6BF,gBAAC,KAAD,KACE,gBAAC,KAAD,CAAKO,GAAI,CAAC,GAAI,IAAKC,GAAI,GAAIC,QAAM,GAC/B,gBAAC,KAAD,CAAMC,SAAU,GAAIC,WAAW,YAAYF,QAAM,EAACG,MAAI,GACnD,oCACD,qBAAGC,KAAK,kCACN,gBAAC,KAAD,CAAMH,SAAU,GAAIC,WAAW,YAAYG,MAAM,QAAjD,qBAIN,gBAAC,KAAD,CAAKP,GAAI,CAAC,GAAI,IAAKQ,GAAI,IACrB,gBAAC,KAAD,CAAYC,MAAM,0BAA0BC,cAAc,IACvD,gBAAGD,EAAH,EAAGA,MAAOE,EAAV,EAAUA,MAAV,OAAsB,gBAAC,KAAD,CAAWC,EAAG,GAAIC,YAAY,UAAUC,iBAAiB,UAAUC,YAAa,EAAGN,MAAOA,EAAOE,MAAOA,EAAOK,WAAS,QAGnJ,gBAAC,KAAD,CAAKhB,GAAI,CAAC,GAAI,IAAKQ,GAAI,IACrB,gBAAC,KAAD,KACE,gBAAC,KAAD,CAAepB,MAAK,iBAAOA,EAAP,CAAc6B,OAAO,OAAD,UAAO7B,EAAM6B,OAAb,CAAqBC,MAAM,OAAD,UAAO9B,EAAM6B,OAAOC,MAApB,CAA2BC,WAAY,cACvG,gBAAC,KAAD,CAAoCC,GAAG,UAAUb,MAAM,QAAQc,QAAQ,sFAI7E,gBAACC,EAAA,EAAD,CAASrB,GAAI,IACVT,EAAc+B,KAAI,WAAyBC,GAAzB,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,KAAMC,EAAnB,EAAmBA,GAAnB,OACjB,gBAAC,KAAD,CAAiBC,IAAKD,GAAE,SAAaH,EAAKK,UAAW,IAAIC,KAAKC,OAAON,IAAYO,KAAMN,EAAMlB,GAAI,GAAIY,GAAG,gBAG5G,qBAAGd,KAAK,wBACN,gBAAC,KAAD,CAAMJ,QAAM,EAACC,SAAU,GAAI8B,WAAY,GAAI1B,MAAM,QAC9C,wBAcX,EAPa,kBACX,gBAAC,KAAD,KAEI,gBAACpB,EAAD,QCvQN,EAnCa,WACX,IAAM+C,GAAWC,SACjB,GAA4C7C,eAAS,GAA9C8C,EAAP,KAAuBC,EAAvB,KAMA,OAJA3C,gBAAS,iBAAC,kHAEP,IAGD,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAK4C,MAAM,yBAEX,gBAAC,KAAD,CAAKlB,GAAG,QAAQmB,UAAWL,EAASM,OAAQC,MAAM,QAChD,gBAAC,KAAD,CAAKrB,GAAG,SACN,gBAACsB,EAAA,EAAD,KACE,gBAACA,EAAA,WAAD,CAAiBC,QAAS,WAAQN,GAAmBD,MACrD,gBAACM,EAAA,QAAD,MACA,gBAACA,EAAA,OAAD,OAEF,gBAAC,EAAD,MAGA,gBAACE,EAAA,EAAD,MACCR,GACC,gBAAC,KAAD,CAAKS,SAAS,QAAQzB,GAAG,QAAQqB,MAAM,QAAQD,OAAO,SACpD,gBAACM,EAAA,EAAD,CAAYC,YAAa,WAAQV,GAAmBD","file":"component---src-pages-index-js-c48630b10f17f05d98f2.js","sourcesContent":["// @ts-nocheck\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'gatsby';\nimport { Box, extend, Image, Row, Text, ThemeProvider, useTheme } from 'elemental-react';\nimport { Svg, G, Path, Rect, Circle } from 'react-primitives-svg';\nimport { differenceInDays, differenceInHours, differenceInMinutes } from 'date-fns';\n// import OAuth from 'oauth-1.0a';\nimport Modal from 'react-modal';\n// import crypto from 'crypto';\n// import fetch from 'sync-fetch/index';\n\nimport { Icon, TextInput, InputField, TruncatedZAddress, CryptoAddressCopy } from '@elemental-zcash/components';\nimport { MicroPostFeedItem, ZecPostFeedItem } from '@zpublish/components';\nimport Section from '@zpublish/components/lib/common/Section';\n\nimport AppBar from '../../../../components/lib/common/AppBar';\nimport Footer from '../../../../components/lib/common/Footer';\n// import Section from '../../../../components/lib/common/Section';\n\nimport data from '../../../../components/data/home_timeline.json';\nimport zecPagesData from '../../../../components/data/zecpages_feed.json';\nimport userTimelineData from '../../../../components/data/user_timeline.json';\n// import { Button } from 'elemental-react/lib/main.web.esm';\nimport QRCode from '../qrcode';\nimport useWindowViewport from '../../hooks/use-window-viewport';\n\n\nconst copyTextToClipboard = async (text) => {\n  if (!navigator.clipboard) {\n    return;\n  }\n  return await navigator.clipboard.writeText(text);\n}\n\nconst toBase64 = (text) => {\n  if (typeof window === 'undefined') {\n    return Buffer.from(text).toString('base64')\n  } else {\n    return btoa(text);\n  }\n};\n\n// const MicroPostFeedItem = ({ id, user, retweetUser, createdAt, isRepliedTo, retweetedStatus, quotedStatus, text, inReplyToStatusId }) => {\n//   const [tipVisible, setTipVisible] = useState(false);\n//   const { width } = useWindowViewport();\n//   const [memoContent, setMemoContent] = useState('test');\n//   const [copyIsClicked, setCopyIsClicked] = useState(false);\n//   const [copyIsHovered, setCopyIsHovered] = useState(false);\n\n//   const memo = toBase64(unescape(encodeURIComponent(memoContent))).replace('=', '');\n\n//   function openModal() {\n//     setTipVisible(true);\n//   }\n//   const zaddr = 'zs19flc40y4u9qm80mplhqqt7q62076sj0k5v4rvpjcgetcs73fcx7amg3zfr4vnxc4qqh3ct4wgwq';\n//   /*\n//     function afterOpenModal() {\n//       // references are now sync'd and can be accessed.\n//       subtitle.style.color = '#f00';\n//     }\n//   */\n\n//   function closeModal() {\n//     setTipVisible(false);\n//   }\n\n//   return (\n//     <Box borderWidth=\"unset\" borderTopWidth={1} borderBottomWidth={1} borderLeftWidth={0} borderRightWidth={0} borderColor=\"#EAEAEA\">\n//       <Modal\n//         isOpen={tipVisible}\n//         // onAfterOpen={afterOpenModal}\n//         onRequestClose={closeModal}\n//         style={{\n//           content: {\n//             top: '50%',\n//             left: '50%',\n//             right: 'auto',\n//             bottom: 'auto',\n//             marginRight: '-50%',\n//             transform: 'translate(-50%, -50%)',\n//             padding: 0,\n//           },\n//         }}\n//         contentLabel=\"Example Modal\"\n//       >\n//         <Box p={40}>\n//           <Row>\n//             <Box flex={1} />\n//             <Button fontFamily=\"IBM Plex Sans\" fontSize={14} fontWeight=\"bold\" onClick={closeModal} mb={32}>\n//               CLOSE\n//             </Button>\n//           </Row>\n//           <Box alignItems=\"center\">\n//             <Text fontFamily=\"IBM Plex Mono\" fontSize={24} mb={24}>Send 0.001 ZEC to</Text>\n//             <QRCode\n//               bgColor=\"#ffffff\"\n//               fgColor=\"#000000\"\n//               includeMargin={true}\n//               style={{ width: width * 0.55, height: width * 0.55, maxHeight: 512, maxWidth: 512 }}\n//               value={`zcash:${zaddr}?amount=0.001&memo=${memo}`}\n//             />\n//           </Box>\n//           <Row\n//             bg=\"#F1F1F1\"\n//             borderRadius={4}\n//             p=\"8px\"\n//             px={12}\n//             mt={32}\n//             alignItems=\"center\"\n//           >\n//             <Text as=\"codespan\" flex={1} style={{ wordBreak: 'break-all' }} fontFamily=\"IBM Plex Mono\" fontSize={12} lineHeight={16}>{`zcash:${zaddr}?amount=0.001&memo=${memo}`}</Text>\n//             <Box\n//               style={{ cursor: 'pointer' }}\n//               ml={16}\n//               width={32}\n//               height={32}\n//               borderWidth={1}\n//               borderColor=\"black\"\n//               alignItems=\"center\"\n//               justifyContent=\"center\"\n//               onClick={async () => {\n//                 await copyTextToClipboard(`zcash:${zaddr}?amount=0.001&memo=${memo}`);\n//                 setCopyIsClicked(true);\n//                 setTimeout(() => { setCopyIsClicked(false); setCopyIsHovered(false); }, 200);\n//               }}\n//               onMouseEnter={() => setCopyIsHovered(true)}\n//               onMouseLeave={() => { setCopyIsHovered(false); }}\n//               style={{ ...(copyIsHovered && { opacity: 0.5 }), ...(copyIsClicked && { opacity: 0.1 })}}\n//             >\n//               <CopyIcon />\n//             </Box>\n//           </Row>\n//         </Box>\n//       </Modal>\n//       {retweetedStatus && (\n//         <Row px={[16, 40]} alignItems=\"center\" pt={12}>\n//           <Row width={40} mr={12}>\n//             <Box flex={1} />\n//             <RepostIcon fill=\"#6D6D6D\" />\n//           </Row>\n//           <Text fontFamily=\"Helvetica\" fontSize={14} color=\"#6D6D6D\">{`${retweetUser.name} Retweeted`}</Text>\n//         </Row>\n//       )}\n//       <Row py={12} px={[16, 40]}>\n//         <Box mr={12} alignItems=\"center\">\n//           {inReplyToStatusId && <Box width=\"2px\" height={32} bg=\"#B5B5B5\" mb={2} />}\n//           <ProfileIcon size={40} uri={user.profile_image_url_https} />\n//           {isRepliedTo && <Box width=\"2px\" flex={1} bg=\"#B5B5B5\" mb={2} />}\n//         </Box>\n//         <Box flex={1}>\n//           <Row justifyContent=\"space-between\" flex={1}>\n//             <Box>\n//               <NameText mb={1}>{user.name}</NameText>\n//               <UsernameText>{`@${user.screen_name}`}</UsernameText>\n//             </Box>\n//             {/* <Box flex={1} /> */}\n//             <Text fontFamily=\"Helvetica\" fontSize={16}>{getTimeAgo(createdAt)}</Text>\n//           </Row>\n//           <Box pt=\"4px\">\n//             {text ? (\n//               <Text fontSize={16} fontFamily=\"Helvetica\">\n//                 {text}\n//               </Text>\n//               ) : (\n//                 <>\n//                   <Box bg=\"#DEDEDE\" height={16} width=\"90%\" mb=\"4px\" />\n//                   <Box bg=\"#DEDEDE\" height={16} width=\"80%\" mb=\"4px\" />\n//                   <Box bg=\"#DEDEDE\" height={16} width=\"90%\" mb=\"4px\" />\n//                 </>\n//               )\n//             }\n//           </Box>\n//           {quotedStatus && (\n//             <QuotePost user={quotedStatus.user} createdAt={new Date(quotedStatus.created_at)} text={quotedStatus.text} />\n//           )}\n//           <Row mt={12} justifyContent=\"space-between\">\n//             {[\n//               { component: ReplyIcon, id: 'reply' },\n//               { component: RepostIcon, id: 'repost' },\n//               { component: FavoriteIcon, id: 'favorite' },\n//               { component: ShareIcon, id: 'share',\n//             }].map(({ component: Comp, id: actionId }) => {\n//               const hrefById = {\n//                 reply: `https://twitter.com/intent/tweet?in_reply_to=${id}`,\n//                 repost: `https://twitter.com/intent/retweet?tweet_id=${id}`,\n//                 favorite: `https://twitter.com/intent/like?tweet_id=${id}`,\n//               };\n//               return (\n//                 <Box mr={16} as=\"a\" href={actionId === 'share' ? '#' : hrefById[actionId]} target={actionId !== 'share' && '_blank'} onClick={(actionId === 'share') ? () => { if (typeof navigator !== 'undefined' && navigator?.canShare && navigator.share) { navigator?.share({ url: `https://twitter.com/${user.screen_name}/${id}`}) } } : undefined}>\n//                   <Comp fill=\"#5F6E7A\" />\n//                 </Box>\n//               );\n//             })}\n//             <Box flex={1} />\n//             <Box\n//               as=\"a\"\n//               href=\"#\"\n//               onClick={() => {\n//                 setMemoContent(`TIP_TWEET:${id}`);\n//                 setTipVisible(!tipVisible);\n//               }}\n//             >\n//               <ZcashIcon />\n//             </Box>\n//           </Row>\n//         </Box>\n//       </Row>\n//     </Box>\n//   );\n// };\n\nconst hmacSha256Base64Digest = async (body, k) => {\n  let secret = k; // the secret key\n  let enc = new TextEncoder(\"utf-8\");\n  let algorithm = { name: \"HMAC\", hash: \"SHA-256\" };\n\n  let key = await crypto.subtle.importKey(\"raw\", enc.encode(secret), algorithm, false, [\"sign\", \"verify\"]);\n  let signature = await crypto.subtle.sign(algorithm.name, key, enc.encode(body));\n  let digest = btoa(String.fromCharCode(...new Uint8Array(signature)));\n\n  return digest;\n};\n\nconst ConversationList = () => {\n  return (\n    <>\n\n    </>\n  );\n}\n\nconst aggregateDataById = (dataList) => {\n  return dataList?.data?.reduce((acc, item) => {\n    if (item?.id) {\n      acc[item.id] = item;\n    }\n    return acc;\n  })\n}\n\nconst TimelineFeed = () => {\n  const { theme } = useTheme();\n  const [items, setItems] = useState(userTimelineData);\n  const [zecPagesItems, setZecPagesItems] = useState([,,,,,,]);\n\n  const [conversations, setConversations] = useState({\n    \n  });\n\n  useEffect(async () => {\n    const url = 'https://be.zecpages.com/board/1';\n\n    const res = await fetch(url, {\n      headers: {},\n    });\n\n    const _data = await res.json();\n\n    setZecPagesItems(_data);\n  }, [setZecPagesItems]);\n\n  // useEffect(async () => {\n  //   const url = 'https://api.twitter.com/1.1/statuses/home_timeline.json';\n\n  //   const oauth = OAuth({\n  //     consumer: {\n  //       key: 'k',\n  //       secret: 's'\n  //     },\n  //     signature_method: 'HMAC-SHA256',\n  //     hash_function: hmacSha256Base64Digest,\n  //   });\n  //   const request_data = {\n  //       url: url,\n  //       method: 'GET'\n  //   };\n  //   const oauthAuthorized = await oauth.authorizeAsync(request_data, { key: 'k', secret: 's' })\n  //   console.log({ oauthAuthorized });\n  //   const res = await fetch(url, {\n  //     headers: {...oauth.toHeader(oauthAuthorized)}\n  //   });\n  //   const _data = await res.json();\n\n  //   setItems(_data.slice(0, 10));\n  //   console.log(_data[0]);\n  // }, []);\n\n  return (\n    <Box>\n      <Box px={[32, 40]} py={20} center>\n        <Text fontSize={20} fontFamily=\"secondary\" center bold>\n          {'ZEC-powered anonymous memo board '}\n          <a href=\"https://zecpages.com/boardinfo\">\n            <Text fontSize={20} fontFamily=\"secondary\" color=\"blue\">(how it works)</Text>\n          </a>\n        </Text>\n      </Box>\n      <Box px={[16, 40]} mb={16}>\n        <InputField label=\"Write your post here...\" labelVisible={false}>\n          {({ label, value }) => <TextInput p={16} borderColor=\"#313880\" placeholderColor=\"#636363\" borderWidth={2} label={label} value={value} multiline />}\n        </InputField>\n      </Box>\n      <Box px={[16, 40]} mb={16}>\n        <Box>\n          <ThemeProvider theme={{ ...theme, colors: { ...theme.colors, icons: { ...theme.colors.icons, qrcode_box: '#fff' } }}}>\n            <CryptoAddressCopy /*bg=\"#313880\"*/ bg=\"#224259\" color=\"white\" address=\"zs1j29m7zdhhyy2eqrz89l4zhk0angqjh368gqkj2vgdyqmeuultteny36n3qsm47zn8du5sw3ts7f\" />\n          </ThemeProvider>\n        </Box>\n      </Box>\n      <Section py={16}>\n        {zecPagesItems.map(({ datetime, memo, id }, i) => (\n          <ZecPostFeedItem key={id || `index-${i}`} createdAt={new Date(Number(datetime))} text={memo} mb={16} bg=\"#E9F7F9\" />\n        ))}  \n      </Section>\n      <a href=\"https://zecpages.com\">\n        <Text center fontSize={20} lineHeight={24} color=\"blue\">\n          {'> Visit ZECpages'}\n        </Text>\n      </a>\n    </Box>\n  );\n};\n\nconst Home = () => (\n  <Box>\n    {/* <Box width=\"100%\" height={720} bg=\"gray\" /> */}\n      <TimelineFeed />\n  </Box>\n);\n\nexport default Home;\n","import React, { useEffect, useState } from 'react';\nimport { Link } from 'gatsby';\nimport { Box, Row, Text } from 'elemental-react';\n\nimport Gallery from '../../../components/src/common/Gallery';\n\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport useWindowViewport from '../hooks/use-window-viewport';\nimport AppBar from '../../../components/lib/common/AppBar';\nimport NavOverlay from '../../../components/lib/overlays/NavOverlay';\nimport Section from '../../../components/lib/common/Section';\nimport Footer from '../../../components/lib/common/Footer';\n\nimport ZecPagesTimeline from '../components/routes/zecpages-timeline';\n\n// const hmacSha256Base64Digest = async (body, k) => {\n//   let secret = k; // the secret key\n//   let enc = new TextEncoder(\"utf-8\");\n//   let algorithm = { name: \"HMAC\", hash: \"SHA-256\" };\n\n//   let key = await crypto.subtle.importKey(\"raw\", enc.encode(secret), algorithm, false, [\"sign\", \"verify\"]);\n//   let signature = await crypto.subtle.sign(algorithm.name, key, enc.encode(body));\n//   let digest = btoa(String.fromCharCode(...new Uint8Array(signature)));\n\n//   return digest;\n// }\n\nconst Home = () => {\n  const viewport = useWindowViewport();\n  const [navOverlayOpen, setNavOverlayOpen] = useState(false);\n\n  useEffect(async () => {\n    \n  }, []);\n\n  return (\n    <Layout>\n      <SEO title=\"Home | Microblog App\" />\n      {/* <Box width=\"100vw\"> */}\n      <Box bg=\"white\" minHeight={viewport.height} width=\"100%\">\n        <Box bg=\"white\">\n          <AppBar>\n            <AppBar.MenuIcon onClick={() => { setNavOverlayOpen(!navOverlayOpen); }} />\n            <AppBar.Title />\n            <AppBar.Fill />\n          </AppBar>\n          <ZecPagesTimeline />\n          {/* <Section pt=\"8px\">\n          </Section> */}\n          <Footer />\n          {navOverlayOpen && (\n            <Box position=\"fixed\" bg=\"white\" width=\"100vw\" height=\"100vh\">\n              <NavOverlay onMenuClick={() => { setNavOverlayOpen(!navOverlayOpen); }} />\n            </Box>\n          )}\n        </Box>\n      </Box>\n      {/* </Box> */}\n    </Layout>\n  );\n}\n\nexport default Home;\n"],"sourceRoot":""}