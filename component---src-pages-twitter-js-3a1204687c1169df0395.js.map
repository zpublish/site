{"version":3,"sources":["webpack://web/./src/components/routes/microblog-timeline.js","webpack://web/./src/pages/twitter.js"],"names":["TimelineFeed","useState","userTimelineData","items","setZecPagesItems","useEffect","fetch","headers","res","json","_data","Section","py","slice","map","inReplyToUser","quoted_status","retweeted_status","in_reply_to_status_id","in_reply_to_screen_name","entities","in_reply_to_user_id_str","user","text","args","createdAt","Date","created_at","user_mentions","forEach","screen_name","name","id_str","borderTopWidth","borderBottomWidth","borderColor","quotedStatus","retweetUser","retweetedStatus","inReplyToStatusId","isRepliedTo","fontSize","color","fontFamily","ml","my","viewport","useWindowViewport","navOverlayOpen","setNavOverlayOpen","title","bg","minHeight","height","width","AppBar","onClick","Footer","position","NavOverlay","onMenuClick"],"mappings":"mfAgPMA,EAAe,WACnB,OAA0BC,cAASC,GAA5BC,EAAP,KACA,GADA,MAC0CF,cAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAnCG,GAAtB,WAEA,GAA0CH,cAAS,IAAnD,UA0CA,OAtCAI,gBAAS,iBAAC,4FACI,kCADJ,SAGUC,MAFN,kCAEiB,CAC3BC,QAAS,KAJH,cAGFC,EAHE,gBAOYA,EAAIC,OAPhB,OAOFC,EAPE,OASRN,EAAiBM,GATT,2CAUP,CAACN,IA6BF,gBAAC,KAAD,KACE,gBAACO,EAAA,EAAD,CAASC,GAAI,IACVT,EAAMU,MAAM,EAAG,IAAIC,KAAI,YAMjB,IAIDC,EATJC,EAKI,EALJA,cAAeC,EAKX,EALWA,iBACfC,EAII,EAJJA,sBACAC,EAGI,EAHJA,wBACAC,EAEI,EAFJA,SAAUC,EAEN,EAFMA,wBAAyBC,EAE/B,EAF+BA,KAAMC,EAErC,EAFqCA,KACtCC,GACC,YAEEC,EAAY,IAAIC,KAAKF,EAAKG,YAchC,OAXIR,GACEC,WAAUQ,eACZR,EAASQ,cAAcC,SAAQ,YAAoC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,KAAmB,EAAbC,SACpCX,IACbN,EAAgB,CAAEgB,OAAMD,mBAQ9B,gBAAC,KAAD,CAAKG,eAAgB,EAAGC,kBAAmB,EAAGC,YAAY,WACvDlB,EACC,gBAAC,KAAD,CACEK,KAAML,EAAiBK,KACvBG,UAAW,IAAIC,KAAKT,EAAiBU,YACrCS,aAAcnB,EAAiBD,cAC/BqB,YAAaf,EACbgB,gBAAiBrB,EACjBM,KAAMN,EAAiBM,KACvBgB,kBAAmBrB,IAGrB,gCACGA,GACC,gCACE,gBAAC,KAAD,CAAmBI,KAAMP,EAAeyB,aAAW,IACnD,gBAAC,KAAD,CAAMC,SAAU,GAAIC,MAAM,OAAOC,WAAW,YAAYC,GAAI,GAAIC,GAAI,GAApE,qBAGJ,gBAAC,KAAD,CAAmBvB,KAAMA,EAAMG,UAAWA,EAAWW,aAAcpB,EAAeO,KAAMA,EAAMgB,kBAAmBrB,YAkBnI,EAPa,kBACX,gBAAC,KAAD,KAEI,gBAAClB,EAAD,QC1RN,EAnCa,WACX,IAAM8C,GAAWC,SACjB,GAA4C9C,eAAS,GAA9C+C,EAAP,KAAuBC,EAAvB,KAMA,OAJA5C,gBAAS,iBAAC,kHAEP,IAGD,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAK6C,MAAM,yBAEX,gBAAC,KAAD,CAAKC,GAAG,QAAQC,UAAWN,EAASO,OAAQC,MAAM,QAChD,gBAAC,KAAD,CAAKH,GAAG,SACN,gBAACI,EAAA,EAAD,KACE,gBAACA,EAAA,WAAD,CAAiBC,QAAS,WAAQP,GAAmBD,MACrD,gBAACO,EAAA,QAAD,MACA,gBAACA,EAAA,OAAD,OAEF,gBAAC,EAAD,MAGA,gBAACE,EAAA,EAAD,MACCT,GACC,gBAAC,KAAD,CAAKU,SAAS,QAAQP,GAAG,QAAQG,MAAM,QAAQD,OAAO,SACpD,gBAACM,EAAA,EAAD,CAAYC,YAAa,WAAQX,GAAmBD","file":"component---src-pages-twitter-js-3a1204687c1169df0395.js","sourcesContent":["// @ts-nocheck\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'gatsby';\nimport { Box, extend, Image, Row, Text } from 'elemental-react';\nimport { Svg, G, Path, Rect, Circle } from 'react-primitives-svg';\nimport { differenceInDays, differenceInHours, differenceInMinutes } from 'date-fns';\n// import OAuth from 'oauth-1.0a';\nimport Modal from 'react-modal';\n// import crypto from 'crypto';\n// import fetch from 'sync-fetch/index';\n\nimport { MicroPostFeedItem, ZecPostFeedItem } from '@zpublish/components';\nimport Section from '@zpublish/components/lib/common/Section';\n\nimport AppBar from '../../../../components/lib/common/AppBar';\nimport Footer from '../../../../components/lib/common/Footer';\n// import Section from '../../../../components/lib/common/Section';\n\nimport data from '../../../../components/data/home_timeline.json';\nimport zecPagesData from '../../../../components/data/zecpages_feed.json';\nimport userTimelineData from '../../../../components/data/user_timeline.json';\n// import { Button } from 'elemental-react/lib/main.web.esm';\nimport QRCode from '../qrcode';\nimport useWindowViewport from '../../hooks/use-window-viewport';\n\n\n\nconst copyTextToClipboard = async (text) => {\n  if (!navigator.clipboard) {\n    return;\n  }\n  return await navigator.clipboard.writeText(text);\n}\n\nconst toBase64 = (text) => {\n  if (typeof window === 'undefined') {\n    return Buffer.from(text).toString('base64')\n  } else {\n    return btoa(text);\n  }\n};\n\n// const MicroPostFeedItem = ({ id, user, retweetUser, createdAt, isRepliedTo, retweetedStatus, quotedStatus, text, inReplyToStatusId }) => {\n//   const [tipVisible, setTipVisible] = useState(false);\n//   const { width } = useWindowViewport();\n//   const [memoContent, setMemoContent] = useState('test');\n//   const [copyIsClicked, setCopyIsClicked] = useState(false);\n//   const [copyIsHovered, setCopyIsHovered] = useState(false);\n\n//   const memo = toBase64(unescape(encodeURIComponent(memoContent))).replace('=', '');\n\n//   function openModal() {\n//     setTipVisible(true);\n//   }\n//   const zaddr = 'zs19flc40y4u9qm80mplhqqt7q62076sj0k5v4rvpjcgetcs73fcx7amg3zfr4vnxc4qqh3ct4wgwq';\n//   /*\n//     function afterOpenModal() {\n//       // references are now sync'd and can be accessed.\n//       subtitle.style.color = '#f00';\n//     }\n//   */\n\n//   function closeModal() {\n//     setTipVisible(false);\n//   }\n\n//   return (\n//     <Box borderWidth=\"unset\" borderTopWidth={1} borderBottomWidth={1} borderLeftWidth={0} borderRightWidth={0} borderColor=\"#EAEAEA\">\n//       <Modal\n//         isOpen={tipVisible}\n//         // onAfterOpen={afterOpenModal}\n//         onRequestClose={closeModal}\n//         style={{\n//           content: {\n//             top: '50%',\n//             left: '50%',\n//             right: 'auto',\n//             bottom: 'auto',\n//             marginRight: '-50%',\n//             transform: 'translate(-50%, -50%)',\n//             padding: 0,\n//           },\n//         }}\n//         contentLabel=\"Example Modal\"\n//       >\n//         <Box p={40}>\n//           <Row>\n//             <Box flex={1} />\n//             <Button fontFamily=\"IBM Plex Sans\" fontSize={14} fontWeight=\"bold\" onClick={closeModal} mb={32}>\n//               CLOSE\n//             </Button>\n//           </Row>\n//           <Box alignItems=\"center\">\n//             <Text fontFamily=\"IBM Plex Mono\" fontSize={24} mb={24}>Send 0.001 ZEC to</Text>\n//             <QRCode\n//               bgColor=\"#ffffff\"\n//               fgColor=\"#000000\"\n//               includeMargin={true}\n//               style={{ width: width * 0.55, height: width * 0.55, maxHeight: 512, maxWidth: 512 }}\n//               value={`zcash:${zaddr}?amount=0.001&memo=${memo}`}\n//             />\n//           </Box>\n//           <Row\n//             bg=\"#F1F1F1\"\n//             borderRadius={4}\n//             p=\"8px\"\n//             px={12}\n//             mt={32}\n//             alignItems=\"center\"\n//           >\n//             <Text as=\"codespan\" flex={1} style={{ wordBreak: 'break-all' }} fontFamily=\"IBM Plex Mono\" fontSize={12} lineHeight={16}>{`zcash:${zaddr}?amount=0.001&memo=${memo}`}</Text>\n//             <Box\n//               style={{ cursor: 'pointer' }}\n//               ml={16}\n//               width={32}\n//               height={32}\n//               borderWidth={1}\n//               borderColor=\"black\"\n//               alignItems=\"center\"\n//               justifyContent=\"center\"\n//               onClick={async () => {\n//                 await copyTextToClipboard(`zcash:${zaddr}?amount=0.001&memo=${memo}`);\n//                 setCopyIsClicked(true);\n//                 setTimeout(() => { setCopyIsClicked(false); setCopyIsHovered(false); }, 200);\n//               }}\n//               onMouseEnter={() => setCopyIsHovered(true)}\n//               onMouseLeave={() => { setCopyIsHovered(false); }}\n//               style={{ ...(copyIsHovered && { opacity: 0.5 }), ...(copyIsClicked && { opacity: 0.1 })}}\n//             >\n//               <CopyIcon />\n//             </Box>\n//           </Row>\n//         </Box>\n//       </Modal>\n//       {retweetedStatus && (\n//         <Row px={[16, 40]} alignItems=\"center\" pt={12}>\n//           <Row width={40} mr={12}>\n//             <Box flex={1} />\n//             <RepostIcon fill=\"#6D6D6D\" />\n//           </Row>\n//           <Text fontFamily=\"Helvetica\" fontSize={14} color=\"#6D6D6D\">{`${retweetUser.name} Retweeted`}</Text>\n//         </Row>\n//       )}\n//       <Row py={12} px={[16, 40]}>\n//         <Box mr={12} alignItems=\"center\">\n//           {inReplyToStatusId && <Box width=\"2px\" height={32} bg=\"#B5B5B5\" mb={2} />}\n//           <ProfileIcon size={40} uri={user.profile_image_url_https} />\n//           {isRepliedTo && <Box width=\"2px\" flex={1} bg=\"#B5B5B5\" mb={2} />}\n//         </Box>\n//         <Box flex={1}>\n//           <Row justifyContent=\"space-between\" flex={1}>\n//             <Box>\n//               <NameText mb={1}>{user.name}</NameText>\n//               <UsernameText>{`@${user.screen_name}`}</UsernameText>\n//             </Box>\n//             {/* <Box flex={1} /> */}\n//             <Text fontFamily=\"Helvetica\" fontSize={16}>{getTimeAgo(createdAt)}</Text>\n//           </Row>\n//           <Box pt=\"4px\">\n//             {text ? (\n//               <Text fontSize={16} fontFamily=\"Helvetica\">\n//                 {text}\n//               </Text>\n//               ) : (\n//                 <>\n//                   <Box bg=\"#DEDEDE\" height={16} width=\"90%\" mb=\"4px\" />\n//                   <Box bg=\"#DEDEDE\" height={16} width=\"80%\" mb=\"4px\" />\n//                   <Box bg=\"#DEDEDE\" height={16} width=\"90%\" mb=\"4px\" />\n//                 </>\n//               )\n//             }\n//           </Box>\n//           {quotedStatus && (\n//             <QuotePost user={quotedStatus.user} createdAt={new Date(quotedStatus.created_at)} text={quotedStatus.text} />\n//           )}\n//           <Row mt={12} justifyContent=\"space-between\">\n//             {[\n//               { component: ReplyIcon, id: 'reply' },\n//               { component: RepostIcon, id: 'repost' },\n//               { component: FavoriteIcon, id: 'favorite' },\n//               { component: ShareIcon, id: 'share',\n//             }].map(({ component: Comp, id: actionId }) => {\n//               const hrefById = {\n//                 reply: `https://twitter.com/intent/tweet?in_reply_to=${id}`,\n//                 repost: `https://twitter.com/intent/retweet?tweet_id=${id}`,\n//                 favorite: `https://twitter.com/intent/like?tweet_id=${id}`,\n//               };\n//               return (\n//                 <Box mr={16} as=\"a\" href={actionId === 'share' ? '#' : hrefById[actionId]} target={actionId !== 'share' && '_blank'} onClick={(actionId === 'share') ? () => { if (typeof navigator !== 'undefined' && navigator?.canShare && navigator.share) { navigator?.share({ url: `https://twitter.com/${user.screen_name}/${id}`}) } } : undefined}>\n//                   <Comp fill=\"#5F6E7A\" />\n//                 </Box>\n//               );\n//             })}\n//             <Box flex={1} />\n//             <Box\n//               as=\"a\"\n//               href=\"#\"\n//               onClick={() => {\n//                 setMemoContent(`TIP_TWEET:${id}`);\n//                 setTipVisible(!tipVisible);\n//               }}\n//             >\n//               <ZcashIcon />\n//             </Box>\n//           </Row>\n//         </Box>\n//       </Row>\n//     </Box>\n//   );\n// };\n\nconst hmacSha256Base64Digest = async (body, k) => {\n  let secret = k; // the secret key\n  let enc = new TextEncoder(\"utf-8\");\n  let algorithm = { name: \"HMAC\", hash: \"SHA-256\" };\n\n  let key = await crypto.subtle.importKey(\"raw\", enc.encode(secret), algorithm, false, [\"sign\", \"verify\"]);\n  let signature = await crypto.subtle.sign(algorithm.name, key, enc.encode(body));\n  let digest = btoa(String.fromCharCode(...new Uint8Array(signature)));\n\n  return digest;\n};\n\nconst ConversationList = () => {\n  return (\n    <>\n\n    </>\n  );\n}\n\nconst aggregateDataById = (dataList) => {\n  return dataList?.data?.reduce((acc, item) => {\n    if (item?.id) {\n      acc[item.id] = item;\n    }\n    return acc;\n  })\n}\n\nconst TimelineFeed = () => {\n  const [items, setItems] = useState(userTimelineData);\n  const [zecPagesItems, setZecPagesItems] = useState([,,,,,,]);\n\n  const [conversations, setConversations] = useState({\n    \n  });\n\n  useEffect(async () => {\n    const url = 'https://be.zecpages.com/board/1';\n\n    const res = await fetch(url, {\n      headers: {},\n    });\n\n    const _data = await res.json();\n\n    setZecPagesItems(_data);\n  }, [setZecPagesItems]);\n\n  // useEffect(async () => {\n  //   const url = 'https://api.twitter.com/1.1/statuses/home_timeline.json';\n\n  //   const oauth = OAuth({\n  //     consumer: {\n  //       key: 'k',\n  //       secret: 's'\n  //     },\n  //     signature_method: 'HMAC-SHA256',\n  //     hash_function: hmacSha256Base64Digest,\n  //   });\n  //   const request_data = {\n  //       url: url,\n  //       method: 'GET'\n  //   };\n  //   const oauthAuthorized = await oauth.authorizeAsync(request_data, { key: 'k', secret: 's' })\n  //   console.log({ oauthAuthorized });\n  //   const res = await fetch(url, {\n  //     headers: {...oauth.toHeader(oauthAuthorized)}\n  //   });\n  //   const _data = await res.json();\n\n  //   setItems(_data.slice(0, 10));\n  //   console.log(_data[0]);\n  // }, []);\n\n  return (\n    <Box>\n      <Section py={16}> \n        {items.slice(0, 10).map(({\n          quoted_status, retweeted_status,\n          in_reply_to_status_id,\n          in_reply_to_screen_name,\n          entities, in_reply_to_user_id_str, user, text,\n          ...args\n        }) => {\n          let timeAgoText;\n          const createdAt = new Date(args.created_at);\n\n          let inReplyToUser;\n          if (in_reply_to_screen_name) {\n            if (entities?.user_mentions) {\n              entities.user_mentions.forEach(({ screen_name, name, id_str }) => {\n                if (id_str === in_reply_to_user_id_str) {\n                  inReplyToUser = { name, screen_name };\n                }\n              })\n            }\n          }\n          // const secondsDiff = ((new Date()).getTime() - createdAt.getTime()) / 1000;\n\n          return (\n            <Box borderTopWidth={1} borderBottomWidth={1} borderColor=\"#EAEAEA\">\n              {retweeted_status ? (\n                <MicroPostFeedItem\n                  user={retweeted_status.user}\n                  createdAt={new Date(retweeted_status.created_at)}\n                  quotedStatus={retweeted_status.quoted_status}\n                  retweetUser={user}\n                  retweetedStatus={retweeted_status}\n                  text={retweeted_status.text}\n                  inReplyToStatusId={in_reply_to_status_id}\n                />\n              ) : (\n                <>\n                  {in_reply_to_status_id && (\n                    <>\n                      <MicroPostFeedItem user={inReplyToUser} isRepliedTo />\n                      <Text fontSize={16} color=\"blue\" fontFamily=\"Helvetica\" ml={68} my={1}>Show this thread</Text>\n                    </>\n                  )}\n                  <MicroPostFeedItem user={user} createdAt={createdAt} quotedStatus={quoted_status} text={text} inReplyToStatusId={in_reply_to_status_id} />\n                </>\n              )}\n            </Box>\n          );\n        })}\n      </Section>\n    </Box>\n  );\n};\n\nconst Home = () => (\n  <Box>\n    {/* <Box width=\"100%\" height={720} bg=\"gray\" /> */}\n      <TimelineFeed />\n  </Box>\n);\n\nexport default Home;\n","import React, { useEffect, useState } from 'react';\nimport { Link } from 'gatsby';\nimport { Box, Row, Text } from 'elemental-react';\n\nimport Gallery from '../../../components/src/common/Gallery';\n\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport useWindowViewport from '../hooks/use-window-viewport';\nimport AppBar from '../../../components/lib/common/AppBar';\nimport NavOverlay from '../../../components/lib/overlays/NavOverlay';\nimport Section from '../../../components/lib/common/Section';\nimport Footer from '../../../components/lib/common/Footer';\n\nimport TwitterTimeline from '../components/routes/microblog-timeline';\n\n// const hmacSha256Base64Digest = async (body, k) => {\n//   let secret = k; // the secret key\n//   let enc = new TextEncoder(\"utf-8\");\n//   let algorithm = { name: \"HMAC\", hash: \"SHA-256\" };\n\n//   let key = await crypto.subtle.importKey(\"raw\", enc.encode(secret), algorithm, false, [\"sign\", \"verify\"]);\n//   let signature = await crypto.subtle.sign(algorithm.name, key, enc.encode(body));\n//   let digest = btoa(String.fromCharCode(...new Uint8Array(signature)));\n\n//   return digest;\n// }\n\nconst Home = () => {\n  const viewport = useWindowViewport();\n  const [navOverlayOpen, setNavOverlayOpen] = useState(false);\n\n  useEffect(async () => {\n    \n  }, []);\n\n  return (\n    <Layout>\n      <SEO title=\"Home | Microblog App\" />\n      {/* <Box width=\"100vw\"> */}\n      <Box bg=\"white\" minHeight={viewport.height} width=\"100%\">\n        <Box bg=\"white\">\n          <AppBar>\n            <AppBar.MenuIcon onClick={() => { setNavOverlayOpen(!navOverlayOpen); }} />\n            <AppBar.Title />\n            <AppBar.Fill />\n          </AppBar>\n          <TwitterTimeline />\n          {/* <Section pt=\"8px\">\n          </Section> */}\n          <Footer />\n          {navOverlayOpen && (\n            <Box position=\"fixed\" bg=\"white\" width=\"100vw\" height=\"100vh\">\n              <NavOverlay onMenuClick={() => { setNavOverlayOpen(!navOverlayOpen); }} />\n            </Box>\n          )}\n        </Box>\n      </Box>\n      {/* </Box> */}\n    </Layout>\n  );\n}\n\nexport default Home;\n"],"sourceRoot":""}